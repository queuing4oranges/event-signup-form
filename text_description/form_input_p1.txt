- action="book.php" - distinguishes which file is responsible to handle the data after the submit button is hit
- isset - checks if a certain value has been set; here if data has been sent to us via the GET method
- data that is sent, is stored in the $_GET variable (or others) - so email, name, date is stored in that array
- check with isset if $_GET and submit - means if data is sent to the server by the submit btn
---
how to prevent user from inserting malicious code:
- we use specialchars! they convert characters, so they cannot execute
---
form validation:
(server-side validation, using php)
1. check if the fields are not empty! - one for each for with if
2. we check that e.g. sth is actual an email (for example with filter, but php only has filters for certain things; so need to validate ourselves -> regex)
- instead of echoing after else, we store the value in a variable now - like this: $email = $_POST['email'];
- after that, we can check with an if statement (here in !negation, bc. otherwise the if would be empty)
- preg_match - how we are matching something to a regular expression, first argument is the filter, second is the argument that's been checked 
---
showing errors:
- we dont want to echo out errors, but show them in the form itself
- therefore we need to store the error message in a variable
- we do that by creating an associative array ($errors) and store the message with their keys ['name'=>'', 'email'=>'', 'event'=>'']
- values are empty, cause there is no error in the beginning
- now we gonna output the error messages inline php, so like this: <div class='red-text'><?php echo $errors['name']?></div>
showing input of user when no error occurs:
---
outputting input of user:
- output the variables inline-php in the input of the html - here in the value field, like this:<input type='text' name='event' value=<?php echo $event ?>>
- comes out as error message: bc they havent been set yet, which is bc we havent hit submit yet and therefore not executed the code - so we need to initialize the variable on top of the page and set them to an empty string
---
next step is redirecting the user to the homepage
- first check if there are any errors, if so, dont do anything, if no - send back to HP
- array_filter cycles through the array and performs some kind of callback fct which we can define in the fct; if we dont define, it still cycles through
- if there are no errors, it will return to false (no error), if true - we do have an error
- if form is valid, redirect to index (header(...))

 
